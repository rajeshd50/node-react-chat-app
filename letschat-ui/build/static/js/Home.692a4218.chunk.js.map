{"version":3,"sources":["_common/hooks/selectors/messageSelectorHook.tsx","components/userlogo/userLogo.tsx","_common/hooks/api/appMessageApiHook.tsx","_common/hooks/actions/appMessageActionHook.tsx","components/chat/friendlist/friendList.tsx","_common/hooks/custom/appDebounce.tsx","components/chat/friendsModal/friendsModal.tsx","components/chat/chatarea/chatArea.tsx","containers/home/home.tsx"],"names":["useAppMessageSelectedUserSelector","useSelector","state","message","selectedUser","useAppUserFriendListSelector","friends","UserLogo","imageLink","name","useState","color","setColor","colorStyle","setColorStyle","useEffect","getColorFor","backgroundColor","Fragment","className","style","src","alt","length","parts","toUpperCase","split","map","x","charAt","filter","slice","join","getInitials","useMessageApi","callApi","useApiCall","callDoSend","data","onSuccess","onError","SAGA_ACTIONS","MESSAGE","SEND","callGetList","LIST","callGetFriendList","FRIENDS","useAppMessageAction","dispatch","useDispatch","appendNewMessage","type","ACTIONS","APPEND_NEW","payload","resetList","RESET_LIST","setLimit","SET_LIMIT","setOffset","SET_OFFSET","setTotal","SET_TOTAL","setSelectedUser","SET_SELECTED_USER","resetUserFriendList","RESET_FRIENDS","setUserFriendList","SET_FRIENDS","FriendList","shouldHide","onSelectUser","userApi","useUserApi","toast","useToaster","friendList","searchText","setSearchText","filteredFriendList","setFilteredFriendList","debouncedSearchText","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","searching","setSearching","searchResult","setSearchResult","messageAction","messageApi","error","list","f","friend_details","toLowerCase","includes","callSearchUser","text","id","onSelectUserClicked","placeholder","onChange","evt","target","href","onClick","preventDefault","options","suppressScrollX","sr","index","frnd","imageFullPath","last_message_time","moment","format","FriendsModal","shouldShow","onClose","Modal","show","backdrop","keyboard","size","Body","ChatArea","sendMessage","user","useAppUserDetailsSelector","messageText","setMessageText","showListModal","setShowListModal","isMobile","useAppGlobalIsDeviceMobileSelector","messageList","limit","offset","chatUserId","setChatUserId","chatId","friendId","useLayoutEffect","lastMessage","document","querySelector","scrollIntoView","getUserName","sendChatMessage","toId","openListModal","getTimeString","str","momentObj","receiverId","senderId","chatClass","classnames","chatInnerClass","createdAt","onKeyDown","key","CustomToaster","sender_details","Home","currentChatUser","useSocket","SOCKET_BASE_URL","autoConnect","query","userId","socket","connect","on","SOCKET_EVENTS","uid","getCurrentChatUserId","showCustom","onToasterClick","user_details","toUser","emit"],"mappings":"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","file":"static/js/Home.692a4218.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { StateExtended } from '../../interfaces/StateExtended'\r\n\r\n\r\nexport function useAppMessageListSelector() {\r\n  const list = useSelector((state: StateExtended) => state.message.list)\r\n\r\n  return list\r\n}\r\n\r\nexport function useAppMessageLimitSelector() {\r\n  const limit = useSelector((state: StateExtended) => state.message.limit)\r\n\r\n  return limit\r\n}\r\n\r\nexport function useAppMessageTotalSelector() {\r\n  const total = useSelector((state: StateExtended) => state.message.total)\r\n\r\n  return total\r\n}\r\n\r\nexport function useAppMessageOffsetSelector() {\r\n  const offset = useSelector((state: StateExtended) => state.message.offset)\r\n\r\n  return offset\r\n}\r\n\r\nexport function useAppMessageSelectedUserSelector() {\r\n  const user = useSelector((state: StateExtended) => state.message.selectedUser)\r\n\r\n  return user\r\n}\r\n\r\nexport function useAppUserFriendListSelector() {\r\n  const friends = useSelector((state: StateExtended) => state.message.friends)\r\n\r\n  return friends\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { getColorFor } from '../../config'\r\n\r\ninterface UserLogoProps {\r\n  imageLink?: string;\r\n  name?: string;\r\n}\r\n\r\nfunction UserLogo({\r\n  imageLink,\r\n  name,\r\n}: UserLogoProps) {\r\n\r\n  const [color, setColor] = useState('')\r\n  const [colorStyle, setColorStyle] = useState<any>({})\r\n\r\n  /**\r\n   * set color according to name\r\n   */\r\n  useEffect(() => {\r\n    if (name) {\r\n      setColor(getColorFor(name));\r\n    }\r\n  }, [name])\r\n  /**\r\n   * set color style object\r\n   */\r\n  useEffect(() => {\r\n    if (color) {\r\n      setColorStyle({backgroundColor: color})\r\n    }\r\n  }, [color])\r\n\r\n  /**\r\n   * get name initials 2 characters\r\n   */\r\n  const getInitials = () => {\r\n    if (!name || !name.length) {\r\n      return 'NA'\r\n    }\r\n    let parts = name.toUpperCase().split(' ')\r\n    return parts && parts.length >= 2 ? parts.map(x => x.charAt(0)).filter(x => x).slice(0, 2).join('') : parts && parts.length == 1 ? parts[0].slice(0, 2) : 'NA'\r\n  }\r\n\r\n  if (!imageLink && !name) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"user-logo-container\" style={colorStyle}>\r\n      {\r\n        imageLink ? <img src={imageLink} alt=\"User\" /> : null\r\n      }\r\n      {\r\n        name && !imageLink ? <span>{getInitials()}</span> : null\r\n      }\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default UserLogo\r\n","import { SAGA_ACTIONS } from '../../../config'\r\nimport { MessageSendReq, MessageListReq } from '../../interfaces/ApiReqRes';\r\nimport { useApiCall } from './appApiCallHook'\r\n\r\nexport function useMessageApi() {\r\n\r\n  const callApi = useApiCall()\r\n\r\n  const send = (data: MessageSendReq, onSuccess: Function, onError: Function) => {\r\n    callApi(SAGA_ACTIONS.MESSAGE.SEND, data, onSuccess, onError);\r\n  }\r\n  const list = (data: MessageListReq, onSuccess: Function, onError: Function) => {\r\n    callApi(SAGA_ACTIONS.MESSAGE.LIST, data, onSuccess, onError);\r\n  }\r\n  const getFriendList = (onSuccess: Function, onError: Function) => {\r\n    callApi(SAGA_ACTIONS.MESSAGE.FRIENDS, null, onSuccess, onError);\r\n  }\r\n\r\n  return {\r\n    callDoSend: send,\r\n    callGetList: list,\r\n    callGetFriendList: getFriendList,\r\n  }\r\n}","import { useDispatch } from 'react-redux'\r\nimport { ACTIONS } from '../../../config'\r\nimport { FriendOrSearchUser } from '../../../store/reducers/messageReducer'\r\nimport { Friends } from '../../interfaces/models/firends'\r\nimport { SearchUser } from '../../interfaces/models/searchUser'\r\n\r\nexport function useAppMessageAction() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  \r\n  /**\r\n   * append new message in redux\r\n   * @param data message\r\n   */\r\n  const appendNewMessage = (data: any) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.APPEND_NEW,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * reset message list\r\n   */\r\n  const resetList = () => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.RESET_LIST,\r\n      payload: null,\r\n    })\r\n  }\r\n  /**\r\n   * set message list fetch limit\r\n   * @param data number\r\n   */\r\n  const setLimit = (data: number) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_LIMIT,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * set message list fetch offset - used for paginating\r\n   * @param data number\r\n   */\r\n  const setOffset = (data: number) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_OFFSET,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * set message list total count\r\n   * @param data number\r\n   */\r\n  const setTotal = (data: number) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_TOTAL,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * set current user for chat\r\n   * @param data user\r\n   */\r\n  const setSelectedUser = (data: FriendOrSearchUser | any) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_SELECTED_USER,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * reset user friend list array\r\n   */\r\n  const resetUserFriendList = () => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.RESET_FRIENDS,\r\n      payload: null,\r\n    })\r\n  }\r\n  /**\r\n   * set user friend list\r\n   * @param data Friends array\r\n   */\r\n  const setUserFriendList = (data: Friends[]) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_FRIENDS,\r\n      payload: data,\r\n    })\r\n  }\r\n\r\n  return {\r\n    appendNewMessage,\r\n    resetList,\r\n    setLimit,\r\n    setOffset,\r\n    setTotal,\r\n    setSelectedUser,\r\n    resetUserFriendList,\r\n    setUserFriendList,\r\n  }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useUserApi } from '../../../_common/hooks/api/appUserApiHook'\r\nimport { useToaster } from '../../../_common/hooks/custom/appToasterHook'\r\nimport { useAppUserFriendListSelector } from '../../../_common/hooks/selectors/messageSelectorHook'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport moment from 'moment'\r\nimport {\r\n  AiOutlineClose,\r\n} from 'react-icons/ai'\r\nimport { Friends } from '../../../_common/interfaces/models/firends'\r\nimport UserLogo from '../../userlogo/userLogo'\r\nimport useDebounce from '../../../_common/hooks/custom/appDebounce'\r\nimport { SearchUser } from '../../../_common/interfaces/models/searchUser'\r\nimport { useAppMessageSelectedUserSelector } from '../../../_common/hooks/selectors/messageSelectorHook'\r\nimport { useAppMessageAction } from '../../../_common/hooks/actions/appMessageActionHook'\r\nimport { useMessageApi } from '../../../_common/hooks/api/appMessageApiHook'\r\n\r\ninterface FriendListProps {\r\n  shouldHide?: boolean;\r\n  onSelectUser?: (data: any) => void;\r\n}\r\n\r\nfunction FriendList({\r\n  shouldHide,\r\n  onSelectUser,\r\n}: FriendListProps) {\r\n  /**\r\n   * const\r\n   */\r\n  const userApi = useUserApi()\r\n  const toast = useToaster()\r\n  const friendList = useAppUserFriendListSelector()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [filteredFriendList, setFilteredFriendList] = useState<Friends[]>([])\r\n  const debouncedSearchText = useDebounce(searchText, 500)\r\n  const [ searching, setSearching ] = useState(false)\r\n  const [ searchResult, setSearchResult ] = useState<SearchUser[]>([])\r\n  const selectedUser = useAppMessageSelectedUserSelector()\r\n  const messageAction = useAppMessageAction()\r\n  const messageApi = useMessageApi()\r\n  /**\r\n   * effects\r\n   */\r\n  /**\r\n   * get friend list\r\n   */\r\n  useEffect(() => {\r\n    messageApi.callGetFriendList(() => {}, (message: string) => {\r\n      toast.error(message)\r\n    })\r\n  }, [])\r\n  /**\r\n   * filter friend list according to typed text\r\n   */\r\n  useEffect(() => {\r\n    if (!searchText) {\r\n      setFilteredFriendList(friendList)\r\n    } else {\r\n      let list = friendList.filter(f => f.friend_details?.name.toLowerCase().includes(searchText.toLowerCase()))\r\n      setFilteredFriendList(list)\r\n    }\r\n  }, [searchText, friendList])\r\n  /**\r\n   * fetch remote list of user names uses debounce of 500ms\r\n   */\r\n  useEffect(() => {\r\n    if (debouncedSearchText) {\r\n      setSearching(true);\r\n      userApi.callSearchUser({\r\n        text: debouncedSearchText,\r\n      }, (message: string, data: SearchUser[]) => {\r\n        setSearching(false)\r\n        setSearchResult(data)\r\n      }, (message: string) => {\r\n        toast.error(message);\r\n      })\r\n    } else {\r\n      setSearchResult([])\r\n    }\r\n  }, [debouncedSearchText])\r\n  /**\r\n   * if no user is selected then select the first one\r\n   * by default\r\n   */\r\n  useEffect(() => {\r\n    if (friendList && friendList.length && (!selectedUser || !selectedUser.id)) {\r\n      messageAction.setSelectedUser(friendList[0])\r\n    }\r\n  }, [friendList])\r\n  /**\r\n   * functions\r\n   */\r\n  /**\r\n   * clear the search text input\r\n   * @param evt event\r\n   */\r\n  const clearSearchText = (evt: React.MouseEvent) => {\r\n    evt && evt.preventDefault()\r\n    setSearchText('')\r\n  }\r\n  /**\r\n   * on user select and user to chat with\r\n   * @param data any\r\n   */\r\n  const onSelectUserClicked = (data: any) => {\r\n    messageAction.setSelectedUser(data)\r\n    onSelectUser && onSelectUser(data);\r\n  }\r\n  /**\r\n   * render functions\r\n   */\r\n  /**\r\n   * on mobile device hide from the main chat area\r\n   */\r\n  if (shouldHide) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"friend-list-container\">\r\n      <div className=\"friend-list-filter-input-container\">\r\n        <input placeholder=\"Find friends\" className=\"form-control friend-list-filter-input\" value={searchText} onChange={(evt) => setSearchText(evt.target.value)} />\r\n        {\r\n          searchText ? <a href=\"#\" className=\"friend-list-filter-clear\" onClick={clearSearchText}>\r\n            <AiOutlineClose/>\r\n          </a> : null\r\n        }\r\n      </div>\r\n      <PerfectScrollbar options={{\r\n        suppressScrollX: true,\r\n      }}>\r\n      <div className=\"friend-list-inner\">\r\n        {/* search list array - from remote */}\r\n        {\r\n          searchResult && searchResult.length ? <>\r\n            <div className=\"search-result-list\">\r\n              <p>Search Result</p>\r\n            {\r\n              searchResult.slice(0, 10).map((sr, index) => {\r\n                return <div key={index} className=\"search-result-single\" onClick={() => onSelectUserClicked(sr)} >\r\n                  <UserLogo name={sr.name} />\r\n                  <span>{sr.name}</span>\r\n                </div>\r\n              })\r\n            }\r\n            </div>\r\n          </> : null\r\n        }\r\n        {/* local friends array after filtered */}\r\n        {\r\n          friendList && friendList.length ? <>\r\n          {\r\n            filteredFriendList && filteredFriendList.length ? filteredFriendList.map((frnd, index) => {\r\n              return <div key={index} className=\"single-friend-container\" onClick={() => onSelectUserClicked(frnd)}>\r\n                <UserLogo name={frnd.friend_details?.name} imageLink={frnd.friend_details?.imageFullPath} />\r\n                <div className=\"friend-list-details\">\r\n                <span className=\"friend-list-name\">{frnd.friend_details?.name}</span>\r\n                <span className=\"friend-list-date\">{frnd.last_message_time ? moment(frnd.last_message_time).format('ddd, D/M YY, hh:mm A') : 'N/A'}</span>\r\n                </div>\r\n              </div>\r\n            }) : !searching && (!searchResult || !searchResult.length) ? <div className=\"friend-list-empty mt-3\">\r\n              <p>Try change search filter!</p>\r\n            </div> : null\r\n          }\r\n          </> : <div className=\"friend-list-empty mt-3\">\r\n            <p>No friends yet!</p>\r\n          </div>\r\n        }\r\n        \r\n      </div>\r\n      </PerfectScrollbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FriendList\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function useDebounce(value: any, delay: number) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value]);\r\n\r\n  return debouncedValue;\r\n}","import React from 'react'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai'\r\nimport FriendList from '../friendlist/friendList'\r\n\r\ninterface FriendsModalProps {\r\n  shouldShow: boolean;\r\n  onClose: () => void;\r\n}\r\n/**\r\n * modal to show friend list when in mobile device\r\n */\r\nfunction FriendsModal({\r\n  shouldShow,\r\n  onClose,\r\n}: FriendsModalProps) {\r\n  const onSelectUser = (data: any) => {\r\n    onClose()\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        show={shouldShow}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        size=\"sm\"\r\n        className=\"friend-list-modal-wrapper\"\r\n      >\r\n        <Modal.Body className=\"friend-list-modal-body\" >\r\n          <a href=\"#\" onClick={(evt) => {\r\n            evt.preventDefault()\r\n            onClose()\r\n          }}>\r\n            <AiOutlineCloseCircle/>\r\n          </a>\r\n          <FriendList onSelectUser={onSelectUser}/>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default FriendsModal\r\n","import React, { useEffect, useLayoutEffect, useState } from 'react'\r\nimport { useAppMessageLimitSelector, useAppMessageListSelector, useAppMessageOffsetSelector, useAppMessageSelectedUserSelector, useAppUserFriendListSelector } from '../../../_common/hooks/selectors/messageSelectorHook'\r\nimport { useAppUserDetailsSelector } from '../../../_common/hooks/selectors/userSelectorHook'\r\nimport { Friends } from '../../../_common/interfaces/models/firends'\r\nimport { SearchUser } from '../../../_common/interfaces/models/searchUser'\r\nimport UserLogo from '../../userlogo/userLogo'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport moment from 'moment'\r\nimport {\r\n  IoMdSend,\r\n} from 'react-icons/io'\r\nimport { useAppGlobalIsDeviceMobileSelector } from '../../../_common/hooks/selectors/globalSelectorHook'\r\nimport { useMessageApi } from '../../../_common/hooks/api/appMessageApiHook'\r\nimport { useAppMessageAction } from '../../../_common/hooks/actions/appMessageActionHook'\r\nimport FriendsModal from '../friendsModal/friendsModal'\r\n\r\nimport classnames from 'classnames'\r\n\r\ninterface ChatAreaProps {\r\n  sendMessage: (text: string, toUser: number) => void;\r\n}\r\n\r\nfunction ChatArea({\r\n  sendMessage,\r\n}: ChatAreaProps) {\r\n  /**\r\n   * const\r\n   */\r\n  const selectedUser = useAppMessageSelectedUserSelector()\r\n  const user = useAppUserDetailsSelector()\r\n  const [ messageText, setMessageText ] = useState('')\r\n  const [ showListModal, setShowListModal ] = useState(false)\r\n  const isMobile = useAppGlobalIsDeviceMobileSelector()\r\n  const messageList = useAppMessageListSelector()\r\n  const messageApi = useMessageApi()\r\n  const limit = useAppMessageLimitSelector()\r\n  const offset = useAppMessageOffsetSelector()\r\n  const messageAction = useAppMessageAction()\r\n  const friendList = useAppUserFriendListSelector()\r\n  const [ chatUserId, setChatUserId ] = useState(0)\r\n  /**\r\n   * effects\r\n   */\r\n  /**\r\n   * set limit and offset \r\n   */\r\n  useEffect(() => {\r\n    messageAction.setLimit(500)\r\n    messageAction.setOffset(0)\r\n  }, [])\r\n  /**\r\n   * fetch past message list for the selected user\r\n   */\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      let chatId = (selectedUser as Friends).friendId ? (selectedUser as Friends).friendId : selectedUser.id\r\n      messageApi.callGetList({\r\n        user: chatId,\r\n        limit: limit || 100,\r\n        offset: offset || 0,\r\n      }, () => {}, () => {})\r\n\r\n      setChatUserId(chatId)\r\n    }\r\n  }, [selectedUser])\r\n  /**\r\n   * scroll down chat area, when new message arrives\r\n   */\r\n  useLayoutEffect(() => {\r\n    let lastMessage = document.querySelector('.message-single:last-child')\r\n    if (lastMessage) {\r\n      lastMessage.scrollIntoView()\r\n    }\r\n  }, [messageList])\r\n  /**\r\n   * functions\r\n   */\r\n  /**\r\n   * get user name to display on top section\r\n   */\r\n  const getUserName = () => {\r\n    if (!selectedUser) {\r\n      return ''\r\n    }\r\n    return (selectedUser as Friends).friend_details ? (selectedUser as Friends).friend_details?.name : (selectedUser as SearchUser).name ? (selectedUser as SearchUser).name : 'N/A'\r\n  }\r\n  /**\r\n   * send message via socket (parent component actually sends the data)\r\n   */\r\n  const sendChatMessage = () => {\r\n    if (messageText && selectedUser) {\r\n      let toId = null\r\n      if ((selectedUser as Friends).friendId) {\r\n        toId = (selectedUser as Friends).friendId\r\n      } else {\r\n        toId = selectedUser.id\r\n      }\r\n      sendMessage(messageText, toId);\r\n      setMessageText('')\r\n    }\r\n  }\r\n  /**\r\n   * check if enter is pressed, if yes then send message\r\n   * @param evt event\r\n   */\r\n  const onKeyDownInput = (evt: React.KeyboardEvent) => {\r\n    if (evt.key == \"Enter\") {\r\n      if (messageText) {\r\n        sendChatMessage()\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * open friend list modal\r\n   */\r\n  const openListModal = () => {\r\n    setShowListModal(true)\r\n  }\r\n  /**\r\n   * close friend list modal\r\n   */\r\n  const closeListModal = () => {\r\n    setShowListModal(false)\r\n  }\r\n  /**\r\n   * get time string to display bellow chat messages\r\n   * @param str string\r\n   */\r\n  const getTimeString = (str: string) => {\r\n    let momentObj = moment(str)\r\n\r\n    if (momentObj.format('YYYY-MM-DD') == moment().format('YYYY-MM-DD')) {\r\n      // today\r\n      return momentObj.format('hh:mm A');\r\n    } else {\r\n      return momentObj.format('D/M YY, hh:mm A')\r\n    }\r\n  }\r\n  /**\r\n   * render functions\r\n   */\r\n  return (\r\n    <div className=\"chat-main-area\">\r\n      {\r\n        selectedUser ? <>\r\n          <div className=\"chat-main-header\">\r\n            <div className=\"chat-main-user-info\">\r\n              <UserLogo name={getUserName()} imageLink={(selectedUser as Friends).friend_details?.imageFullPath} />\r\n              <div className=\"chat-main-user-name-wrapper\">\r\n                <span className=\"chat-main-user-name\">{getUserName()}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"chat-main-user-list-wrap\">\r\n              {\r\n                isMobile ? <button onClick={openListModal} className=\"btn btn-dark\">Friend List</button> : null\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className=\"chat-main-display\">\r\n            <div className=\"chat-main-messages\">\r\n            <PerfectScrollbar options={{\r\n              suppressScrollX: true,\r\n            }}>\r\n              <div className=\"chat-main-messages-list\">\r\n              {\r\n                messageList.filter(x => (x.receiverId == chatUserId || x.senderId == chatUserId) && (x.senderId == user?.id || x.receiverId == user?.id)).map((message, index) => {\r\n                  let chatClass = classnames({\r\n                    'message-single': true,\r\n                    'send': message.senderId == user?.id,\r\n                    'received': message.receiverId == user?.id,\r\n                  })\r\n                  let chatInnerClass = classnames({\r\n                    'message-inner-single': true,\r\n                    'send': message.senderId == user?.id,\r\n                    'received': message.receiverId == user?.id,\r\n                  })\r\n                  return <div key={index} className={chatClass} >\r\n                    <div className={chatInnerClass}>\r\n                      <p>{message?.text}</p>\r\n                      <span>{getTimeString(message.createdAt)}</span>\r\n                    </div>\r\n                  </div>\r\n                })\r\n              }\r\n              </div>\r\n            </PerfectScrollbar>\r\n            </div>\r\n            <div className=\"chat-main-input-container\">\r\n              <div className=\"chat-main-input-container-inner\">\r\n                <input onKeyDown={onKeyDownInput} value={messageText} onChange={(evt) => setMessageText(evt.target.value)} placeholder=\"Type your message\" className=\"form-control chat-main-input\"/>\r\n                <a href=\"#\" onClick={(evt) => {\r\n                  evt.preventDefault()\r\n                  sendChatMessage();\r\n                }} className={messageText ? 'chat-main-input-send' : 'chat-main-input-send disabled'}>\r\n                <IoMdSend/>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </> : <>\r\n          <div className=\"chat-no-user\">\r\n            <p>{friendList && friendList.length ? 'Select user to chat with!' : 'Lets search some friends!'}</p>\r\n            {\r\n              isMobile ? <button onClick={openListModal} className=\"btn btn-dark\">Search Friends</button> : null\r\n            }\r\n          </div>\r\n        </>\r\n      }\r\n      {\r\n        isMobile ? <FriendsModal onClose={closeListModal} shouldShow={showListModal} /> : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatArea\r\n","import React, { useEffect } from 'react'\r\nimport ChatArea from '../../components/chat/chatarea/chatArea'\r\nimport FriendList from '../../components/chat/friendlist/friendList'\r\nimport { useAppGlobalIsDeviceMobileSelector } from '../../_common/hooks/selectors/globalSelectorHook'\r\nimport useSocket from 'use-socket.io-client';\r\nimport { SOCKET_BASE_URL, SOCKET_EVENTS } from '../../config';\r\nimport { useAppUserDetailsSelector } from '../../_common/hooks/selectors/userSelectorHook';\r\nimport { ChatMessage } from '../../_common/interfaces/models/chatMessage';\r\nimport { useAppMessageAction } from '../../_common/hooks/actions/appMessageActionHook';\r\nimport { Friends } from '../../_common/interfaces/models/firends';\r\nimport { useAppMessageSelectedUserSelector } from '../../_common/hooks/selectors/messageSelectorHook';\r\nimport { useToaster } from '../../_common/hooks/custom/appToasterHook';\r\n\r\ninterface CustomToasterProps {\r\n  message: ChatMessage;\r\n  onClick: (data: ChatMessage) => void;\r\n}\r\n\r\nfunction CustomToaster({\r\n  message,\r\n  onClick,\r\n}: CustomToasterProps) {\r\n  if (!message) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"custom-toast-body\" onClick={() => onClick(message)}>\r\n      <span>Message from {message.sender_details?.name}</span>\r\n      <span>{message.text}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction Home() {\r\n  /**\r\n   * const\r\n   */\r\n  const isMobile = useAppGlobalIsDeviceMobileSelector()\r\n  const user = useAppUserDetailsSelector()\r\n  const currentChatUser = useAppMessageSelectedUserSelector()\r\n  const messageAction = useAppMessageAction()\r\n  const toast = useToaster();\r\n  const [socket] = useSocket(SOCKET_BASE_URL, {\r\n    autoConnect: true,\r\n    query: {\r\n      userId: user?.id\r\n    }\r\n  })\r\n  /**\r\n   * effects\r\n   */\r\n  useEffect(() => {\r\n    if (user && user.id) {\r\n      socket.connect()\r\n\r\n      socket.on(SOCKET_EVENTS.MESSAGE, (data: ChatMessage) => {\r\n        messageAction.appendNewMessage(data)\r\n        let uid = getCurrentChatUserId()\r\n        if (uid && uid != data.senderId) {\r\n          toast.showCustom(<CustomToaster onClick={onToasterClick} message={data} />)\r\n        }\r\n      })\r\n      socket.on(SOCKET_EVENTS.FRIENDS, (data: Friends[]) => {\r\n        messageAction.setUserFriendList(data)\r\n      })\r\n    }\r\n  }, [user])\r\n  /**\r\n   * functions\r\n   */\r\n  const onToasterClick = (data: ChatMessage) => {\r\n    if (data && data.sender_details && user) {\r\n      messageAction.setSelectedUser({\r\n        userId: user.id,\r\n        friendId: data.senderId,\r\n        last_message_time: data.createdAt,\r\n        user_details: user,\r\n        friend_details: data.sender_details,\r\n      })\r\n    }\r\n  }\r\n  const getCurrentChatUserId = () => {\r\n    if (!currentChatUser) {\r\n      return null\r\n    }\r\n    if ((currentChatUser as Friends).friendId) {\r\n      return (currentChatUser as Friends).friendId\r\n    } else {\r\n      return currentChatUser.id\r\n    }\r\n  }\r\n  const sendMessage = (text: string, toUser: number) => {\r\n    let data = {\r\n      text,\r\n      senderId: user?.id,\r\n      receiverId: toUser, \r\n    }\r\n    socket.emit(SOCKET_EVENTS.MESSAGE, data)\r\n    messageAction.appendNewMessage(data)\r\n  }\r\n  /**\r\n   * render functions\r\n   */\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-desktop\">\r\n        <FriendList shouldHide={isMobile}/>\r\n        <ChatArea sendMessage={sendMessage}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}