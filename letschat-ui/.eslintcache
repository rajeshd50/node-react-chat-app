[{"D:\\Projects\\node-react-chat\\letschat-ui\\src\\index.tsx":"1","D:\\Projects\\node-react-chat\\letschat-ui\\src\\serviceWorker.ts":"2","D:\\Projects\\node-react-chat\\letschat-ui\\src\\App.tsx":"3","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\loader\\appLoader.tsx":"4","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\index.ts":"5","D:\\Projects\\node-react-chat\\letschat-ui\\src\\config\\index.ts":"6","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hoc\\reqAuth.tsx":"7","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hoc\\reqNoAuth.tsx":"8","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hoc\\layout.tsx":"9","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\loader\\loader.tsx":"10","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\selectors\\globalSelectorHook.tsx":"11","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\signup\\index.tsx":"12","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\home\\index.tsx":"13","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\page-404\\index.tsx":"14","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\login\\index.tsx":"15","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\custom\\useAuthStatus.tsx":"16","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\layout\\layout.tsx":"17","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\index.ts":"18","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\index.ts":"19","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\home\\home.tsx":"20","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\signup\\signup.tsx":"21","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\page-404\\page404.tsx":"22","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\login\\login.tsx":"23","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\header\\header.tsx":"24","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\userReducer.ts":"25","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\globalReducer.ts":"26","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\TextInput\\textInput.tsx":"27","D:\\Projects\\node-react-chat\\letschat-ui\\src\\config\\functions.ts":"28","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\messageReducer.ts":"29","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\message.saga.ts":"30","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\user.saga.ts":"31","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\__callApi.ts":"32","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\custom\\appToasterHook.tsx":"33","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\api\\appUserApiHook.tsx":"34","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\api\\appApiCallHook.tsx":"35","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\actions\\appGlobalActionHook.tsx":"36","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\selectors\\userSelectorHook.tsx":"37","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\chat\\friendlist\\friendList.tsx":"38","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\chat\\chatarea\\chatArea.tsx":"39","D:\\Projects\\node-react-chat\\letschat-ui\\src\\config\\colors.ts":"40","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\userlogo\\userLogo.tsx":"41","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\custom\\appDebounce.tsx":"42","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\selectors\\messageSelectorHook.tsx":"43","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\actions\\appMessageActionHook.tsx":"44","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\api\\appMessageApiHook.tsx":"45","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\chat\\friendsModal\\friendsModal.tsx":"46"},{"size":1579,"mtime":1607951581201,"results":"47","hashOfConfig":"48"},{"size":5283,"mtime":1607770447829,"results":"49","hashOfConfig":"48"},{"size":1619,"mtime":1607935996184,"results":"50","hashOfConfig":"48"},{"size":392,"mtime":1607769627514,"results":"51","hashOfConfig":"48"},{"size":1196,"mtime":1607925658153,"results":"52","hashOfConfig":"48"},{"size":2394,"mtime":1608034175763,"results":"53","hashOfConfig":"48"},{"size":707,"mtime":1608027989665,"results":"54","hashOfConfig":"48"},{"size":667,"mtime":1608027998111,"results":"55","hashOfConfig":"48"},{"size":423,"mtime":1608027945161,"results":"56","hashOfConfig":"48"},{"size":234,"mtime":1607769630641,"results":"57","hashOfConfig":"48"},{"size":1352,"mtime":1607935575244,"results":"58","hashOfConfig":"48"},{"size":336,"mtime":1607878784757,"results":"59","hashOfConfig":"48"},{"size":324,"mtime":1607878752684,"results":"60","hashOfConfig":"48"},{"size":367,"mtime":1607878780418,"results":"61","hashOfConfig":"48"},{"size":330,"mtime":1607878776287,"results":"62","hashOfConfig":"48"},{"size":554,"mtime":1608028211423,"results":"63","hashOfConfig":"48"},{"size":570,"mtime":1607929496306,"results":"64","hashOfConfig":"48"},{"size":980,"mtime":1608010557516,"results":"65","hashOfConfig":"48"},{"size":326,"mtime":1607868299712,"results":"66","hashOfConfig":"48"},{"size":1949,"mtime":1608026839251,"results":"67","hashOfConfig":"48"},{"size":4946,"mtime":1608011966550,"results":"68","hashOfConfig":"48"},{"size":881,"mtime":1607879764088,"results":"69","hashOfConfig":"48"},{"size":4238,"mtime":1607933975890,"results":"70","hashOfConfig":"48"},{"size":1710,"mtime":1607935264425,"results":"71","hashOfConfig":"48"},{"size":1026,"mtime":1608010593044,"results":"72","hashOfConfig":"48"},{"size":727,"mtime":1607935735311,"results":"73","hashOfConfig":"48"},{"size":1670,"mtime":1607925114525,"results":"74","hashOfConfig":"48"},{"size":581,"mtime":1608028243921,"results":"75","hashOfConfig":"48"},{"size":2530,"mtime":1608028772640,"results":"76","hashOfConfig":"48"},{"size":1989,"mtime":1608010541954,"results":"77","hashOfConfig":"48"},{"size":4717,"mtime":1608010526980,"results":"78","hashOfConfig":"48"},{"size":3587,"mtime":1607772121635,"results":"79","hashOfConfig":"48"},{"size":404,"mtime":1607925559617,"results":"80","hashOfConfig":"48"},{"size":1407,"mtime":1608010691679,"results":"81","hashOfConfig":"48"},{"size":1151,"mtime":1607870043837,"results":"82","hashOfConfig":"48"},{"size":1027,"mtime":1608028058532,"results":"83","hashOfConfig":"48"},{"size":542,"mtime":1608010702626,"results":"84","hashOfConfig":"48"},{"size":6053,"mtime":1608028667101,"results":"85","hashOfConfig":"48"},{"size":7645,"mtime":1608028502815,"results":"86","hashOfConfig":"48"},{"size":843,"mtime":1608028294976,"results":"87","hashOfConfig":"48"},{"size":1384,"mtime":1608028759153,"results":"88","hashOfConfig":"48"},{"size":400,"mtime":1607953129339,"results":"89","hashOfConfig":"48"},{"size":1009,"mtime":1608010720987,"results":"90","hashOfConfig":"48"},{"size":2188,"mtime":1608028180451,"results":"91","hashOfConfig":"48"},{"size":810,"mtime":1608011381744,"results":"92","hashOfConfig":"48"},{"size":1043,"mtime":1608028692815,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1903az1",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"96"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"96"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"96"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"96"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},"D:\\Projects\\node-react-chat\\letschat-ui\\src\\index.tsx",[],["210","211"],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\serviceWorker.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\App.tsx",["212","213","214","215","216"],"import React, { useEffect } from 'react'\nimport { URLS } from './config';\nimport { BrowserRouter as Router, Switch, Route, withRouter, HashRouter, Redirect, useHistory } from 'react-router-dom';\n\nimport Home from './containers/home'\nimport Login from './containers/login'\nimport Signup from './containers/signup'\nimport Page404 from './containers/page-404'\n\nimport reqLayout from './_common/hoc/layout'\nimport reqAuth from './_common/hoc/reqAuth'\nimport reqNoAuth from './_common/hoc/reqNoAuth'\nimport { useAppGlobalAction } from './_common/hooks/actions/appGlobalActionHook';\n\nfunction App() {\n  /**\n   * const\n   */\n  const globalAction = useAppGlobalAction()\n  /**\n   * effetcs\n   */\n  useEffect(() => {\n    window.addEventListener(\"resize\", checkDeviceSize)\n    checkDeviceSize()\n    return () => {\n      window.removeEventListener(\"resize\", checkDeviceSize)\n    }\n  }, [])\n\n  /**\n   * functions\n   */\n  const checkDeviceSize = () => {\n    // eslint-disable-next-line no-restricted-globals\n    let width = (window.innerWidth > 0) ? window.innerWidth : (screen as any).width;\n    if (width < 576) {\n      globalAction.setDeviceMobile()\n    } else if (width < 768) {\n      globalAction.setDeviceTab()\n    } else {\n      globalAction.setDeviceDesktop()\n    }\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={URLS.HOME} component={reqAuth(Home)} />\n        <Route path={URLS.LOGIN} component={reqNoAuth(Login)} />\n        <Route path={URLS.SIGNUP} component={reqNoAuth(Signup)} />\n        <Route path=\"*\" component={reqLayout(Page404)} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\loader\\appLoader.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\index.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\config\\index.ts",["217"],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hoc\\reqAuth.tsx",["218","219"],"import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { URLS } from '../../config'\r\nimport Layout from '../../components/layout/layout'\r\nimport { useAuthStatus } from '../hooks/custom/useAuthStatus'\r\n\r\n/**\r\n * check if auth is available, then redirect if necessary \r\n * @param Component Component to render\r\n */\r\nfunction requireAuth(Component: React.ComponentType) {\r\n  function AuthHoc(props: any) {\r\n    const isAuth = useAuthStatus()\r\n\r\n    return (\r\n      isAuth ? <Layout>\r\n        <Component {...props} />\r\n      </Layout> : <Redirect to={URLS.LOGIN}/>\r\n    )\r\n  }\r\n\r\n  return AuthHoc\r\n}\r\nexport default requireAuth\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hoc\\reqNoAuth.tsx",["220"],"import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router'\r\nimport { URLS } from '../../config'\r\nimport Layout from '../../components/layout/layout'\r\nimport { useAuthStatus } from '../hooks/custom/useAuthStatus'\r\n\r\n/**\r\n * check if auth is available, then redirect if necessary \r\n * @param Component Component to render\r\n */\r\nfunction requireNoAuth(Component: React.ComponentType) {\r\n  function NoAuthHoc(props: any) {\r\n    const isAuth = useAuthStatus()\r\n\r\n    return (\r\n      isAuth ? <Redirect to={URLS.HOME}/> : <Layout>\r\n        <Component {...props} />\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return NoAuthHoc\r\n}\r\nexport default requireNoAuth\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hoc\\layout.tsx",["221"],"import React from 'react'\r\nimport { Redirect } from 'react-router'\r\nimport Layout from '../../components/layout/layout'\r\n\r\n/**\r\n * Layout hoc\r\n * @param Component component to render\r\n */\r\nfunction reqLayout(Component: React.ComponentType) {\r\n  function LayoutHoc(props: any) {\r\n    return (\r\n      <Layout>\r\n        <Component {...props} />\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return LayoutHoc\r\n}\r\nexport default reqLayout\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\loader\\loader.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\selectors\\globalSelectorHook.tsx",["222","223","224"],"import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateExtended } from '../../interfaces/StateExtended'\r\n\r\n\r\nexport function useAppGlobalLoaderSelector() {\r\n  const loaderShown = useSelector((state: StateExtended) => state.global.loaderShown)\r\n\r\n  return loaderShown\r\n}\r\n\r\nexport function useAppGlobalIsDeviceMobileSelector() {\r\n  const device = useSelector((state: StateExtended) => state.global.device)\r\n  const [isMobile, setIsMobile] = useState(false)\r\n  useEffect(() => {\r\n    if (device == \"mobile\") {\r\n      setIsMobile(true)\r\n    } else {\r\n      setIsMobile(false)\r\n    }\r\n  }, [device])\r\n\r\n  return isMobile\r\n}\r\n\r\nexport function useAppGlobalIsDeviceTabSelector() {\r\n  const device = useSelector((state: StateExtended) => state.global.device)\r\n  const [isTab, setIsTab] = useState(false)\r\n  useEffect(() => {\r\n    if (device == \"tab\") {\r\n      setIsTab(true)\r\n    } else {\r\n      setIsTab(false)\r\n    }\r\n  }, [device])\r\n\r\n  return isTab\r\n}\r\n\r\nexport function useAppGlobalIsDeviceDesktopSelector() {\r\n  const device = useSelector((state: StateExtended) => state.global.device)\r\n  const [isDesktop, setIsDesktop] = useState(false)\r\n  useEffect(() => {\r\n    if (device == \"desktop\") {\r\n      setIsDesktop(true)\r\n    } else {\r\n      setIsDesktop(false)\r\n    }\r\n  }, [device])\r\n\r\n  return isDesktop\r\n}","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\signup\\index.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\home\\index.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\page-404\\index.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\login\\index.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\custom\\useAuthStatus.tsx",["225"],"import { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateExtended } from '../../interfaces/StateExtended'\r\n\r\n/**\r\n * user auth status hook\r\n */\r\nexport function useAuthStatus() {\r\n  const user = useSelector((state: StateExtended) => state.user)\r\n  const authChecker = () => (user && user.isAuthenticated && user.token && user.user)\r\n  const [isAuthenticated, setAuthenticated] = useState(authChecker())\r\n  \r\n  useEffect(() => {\r\n    setAuthenticated(authChecker())\r\n  }, [user])\r\n\r\n  return isAuthenticated\r\n}","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\layout\\layout.tsx",["226"],"import React, { useEffect } from 'react'\r\nimport { useAppUserAuthSelector } from '../../_common/hooks/selectors/userSelectorHook'\r\nimport HeaderMenu from '../header/header'\r\nimport classnames from 'classnames'\r\n\r\nfunction Layout(props: any) {\r\n  const auth = useAppUserAuthSelector()\r\n  const containerClass = classnames({\r\n    'app-container': true,\r\n    'user-auth': auth\r\n  })\r\n  return (\r\n    <React.Fragment>\r\n      <HeaderMenu/>\r\n      <div className={containerClass}>\r\n      {props.children}\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\index.ts",["227","228","229","230"],"import { fork, take, takeLatest, all, takeEvery, takeLeading } from 'redux-saga/effects';\r\nimport { SAGA_ACTIONS } from '../config';\r\n\r\nimport {\r\n  loginUser,\r\n  logout,\r\n  registerUser,\r\n  userDetails,\r\n  searchUser,\r\n  uploadProfilePic,\r\n} from './user.saga'\r\n\r\nimport {\r\n  sendMessage,\r\n  getUserMessages,\r\n  getFriendsList,\r\n} from './message.saga'\r\n\r\nexport function* sagas() {\r\n  yield all([\r\n    // user saga\r\n    takeLatest(SAGA_ACTIONS.USER.LOGIN, loginUser),\r\n    takeLatest(SAGA_ACTIONS.USER.LOGOUT, logout),\r\n    takeLatest(SAGA_ACTIONS.USER.REGISTER, registerUser),\r\n    takeLatest(SAGA_ACTIONS.USER.DETAILS, userDetails),\r\n    takeLatest(SAGA_ACTIONS.USER.SEARCH, searchUser),\r\n    takeLatest(SAGA_ACTIONS.USER.UPLOAD_PROFILE_PICTURE, uploadProfilePic),\r\n\r\n    // message saga\r\n    takeLatest(SAGA_ACTIONS.MESSAGE.SEND, sendMessage),\r\n    takeLatest(SAGA_ACTIONS.MESSAGE.LIST, getUserMessages),\r\n    takeLatest(SAGA_ACTIONS.MESSAGE.FRIENDS, getFriendsList),\r\n  ])\r\n}","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\index.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\home\\home.tsx",["231"],"import React, { useEffect } from 'react'\r\nimport ChatArea from '../../components/chat/chatarea/chatArea'\r\nimport FriendList from '../../components/chat/friendlist/friendList'\r\nimport { useAppGlobalIsDeviceMobileSelector } from '../../_common/hooks/selectors/globalSelectorHook'\r\nimport useSocket from 'use-socket.io-client';\r\nimport { SOCKET_BASE_URL, SOCKET_EVENTS } from '../../config';\r\nimport { useAppUserDetailsSelector } from '../../_common/hooks/selectors/userSelectorHook';\r\nimport { ChatMessage } from '../../_common/interfaces/models/chatMessage';\r\nimport { useAppMessageAction } from '../../_common/hooks/actions/appMessageActionHook';\r\nimport { Friends } from '../../_common/interfaces/models/firends';\r\n\r\nfunction Home() {\r\n  /**\r\n   * const\r\n   */\r\n  const isMobile = useAppGlobalIsDeviceMobileSelector()\r\n  const user = useAppUserDetailsSelector()\r\n  const messageAction = useAppMessageAction()\r\n  const [socket] = useSocket(SOCKET_BASE_URL, {\r\n    autoConnect: true,\r\n    query: {\r\n      userId: user?.id\r\n    }\r\n  })\r\n  /**\r\n   * effects\r\n   */\r\n  useEffect(() => {\r\n    if (user && user.id) {\r\n      socket.connect()\r\n\r\n      socket.on(SOCKET_EVENTS.MESSAGE, (data: ChatMessage) => {\r\n        messageAction.appendNewMessage(data)\r\n      })\r\n      socket.on(SOCKET_EVENTS.FRIENDS, (data: Friends[]) => {\r\n        messageAction.setUserFriendList(data)\r\n      })\r\n    }\r\n  }, [user])\r\n  /**\r\n   * functions\r\n   */\r\n  const sendMessage = (text: string, toUser: number) => {\r\n    let data = {\r\n      text,\r\n      senderId: user?.id,\r\n      receiverId: toUser, \r\n    }\r\n    socket.emit(SOCKET_EVENTS.MESSAGE, data)\r\n    messageAction.appendNewMessage(data)\r\n  }\r\n  /**\r\n   * render functions\r\n   */\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-desktop\">\r\n        <FriendList shouldHide={isMobile}/>\r\n        <ChatArea sendMessage={sendMessage}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\signup\\signup.tsx",["232","233","234"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport TextInput from '../../components/TextInput/textInput'\r\nimport { URLS } from '../../config'\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport * as yup from 'yup';\r\nimport {\r\n  AiOutlineMail,\r\n  AiOutlineRight,\r\n} from 'react-icons/ai'\r\nimport {\r\n  RiLockPasswordLine,\r\n  RiWechat2Line,\r\n} from 'react-icons/ri'\r\nimport { useUserApi } from '../../_common/hooks/api/appUserApiHook';\r\nimport { useToaster } from '../../_common/hooks/custom/appToasterHook';\r\n\r\ninterface SignUpFormValues {\r\n  email: string;\r\n  name: string;\r\n  password: string;\r\n}\r\n\r\nconst signUpSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required('Name is required'),\r\n  email: yup\r\n    .string()\r\n    .email('Please provide valid email')\r\n    .required('Email is required'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(5, 'Password should have minimum 5 characters')\r\n    .max(20, 'Max 20 characters are allowed')\r\n})\r\n\r\nfunction Signup() {\r\n  /**\r\n   * const\r\n   */\r\n  const { register, control, setValue, handleSubmit, errors } = useForm<SignUpFormValues>({\r\n    resolver: yupResolver(signUpSchema),\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n      name: ''\r\n    },\r\n  })\r\n  const toast = useToaster()\r\n  const userApi = useUserApi()\r\n  /**\r\n   * functions\r\n   */\r\n  const onSignUpSubmit = (values: SignUpFormValues) => {\r\n    userApi.callDoRegister(values, () => { }, (message: string) => {\r\n      toast.error(message);\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"login-box-container\">\r\n      <div className=\"login-box\">\r\n        <div className=\"login-logo-container\">\r\n          <img src=\"/images/icons/android-icon-512x512.png\" />\r\n        </div>\r\n        <h2 className=\"login-text\">Signup</h2>\r\n        <div className=\"login-form-container\">\r\n          <form onSubmit={handleSubmit(onSignUpSubmit)} noValidate>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row login-form-row\">\r\n                <div className=\"col-12 login-form-col\">\r\n                  <Controller\r\n                    control={control}\r\n                    name=\"email\"\r\n                    render={({ onChange, onBlur, value, name, ref }) => (\r\n                      <TextInput\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        value={value}\r\n                        inputRef={ref}\r\n                        icon={<AiOutlineMail />}\r\n                        type=\"email\"\r\n                        error={errors.email}\r\n                        placeholder=\"Your email address...\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12 login-form-col\">\r\n                  <Controller\r\n                    control={control}\r\n                    name=\"name\"\r\n                    render={({ onChange, onBlur, value, name, ref }) => (\r\n                      <TextInput\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        value={value}\r\n                        inputRef={ref}\r\n                        icon={<RiWechat2Line />}\r\n                        type=\"name\"\r\n                        error={errors.name}\r\n                        placeholder=\"Your name...\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <Controller\r\n                    control={control}\r\n                    name=\"password\"\r\n                    render={({ onChange, onBlur, value, name, ref }) => (\r\n                      <TextInput\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        value={value}\r\n                        inputRef={ref}\r\n                        icon={<RiLockPasswordLine />}\r\n                        type=\"password\"\r\n                        error={errors.password}\r\n                        placeholder=\"Your password...\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12 login-form-action-col\">\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Signup\r\n                    <AiOutlineRight />\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-12 login-form-col signup-link-col\">\r\n                  Already have an account? <Link to={URLS.LOGIN}>Login</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Signup\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\page-404\\page404.tsx",["235"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { URLS } from '../../config'\r\n\r\nfunction PageNotFound() {\r\n  return (\r\n    <div className=\"login-box-container\">\r\n      <div className=\"login-box\">\r\n        <div className=\"login-logo-container\">\r\n          <img src=\"/images/icons/android-icon-512x512.png\" />\r\n        </div>\r\n        <h2 className=\"login-text mt-3 mb-3\">Page not found</h2>\r\n        <div className=\"login-form-container\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row login-form-row\">\r\n              <div className=\"col-12 page-not-found-link\">\r\n                Looking for something? Looks like it's not here. Go to <Link to={URLS.HOME}>Home Page</Link> instead.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PageNotFound\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\containers\\login\\login.tsx",["236","237","238","239","240","241"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport TextInput from '../../components/TextInput/textInput'\r\nimport { URLS } from '../../config'\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport * as yup from 'yup';\r\nimport {\r\n  AiOutlineMail,\r\n  AiOutlineRight,\r\n} from 'react-icons/ai'\r\nimport {\r\n  RiLockPasswordLine,\r\n} from 'react-icons/ri'\r\nimport { useToaster } from '../../_common/hooks/custom/appToasterHook';\r\nimport { useUserApi } from '../../_common/hooks/api/appUserApiHook';\r\nimport Loader from '../../components/loader/loader';\r\nimport { useAppGlobalAction } from '../../_common/hooks/actions/appGlobalActionHook';\r\n\r\ninterface LoginFormValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst loginSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email('Please provide valid email')\r\n    .required('Email is required'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(5, 'Password should have minimum 5 characters')\r\n    .max(20, 'Max 20 characters are allowed')\r\n})\r\n\r\nfunction Login() {\r\n  /**\r\n   * const\r\n   */\r\n  const { register, control, setValue, handleSubmit, errors } = useForm<LoginFormValues>({\r\n    resolver: yupResolver(loginSchema),\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n  })\r\n  const toast = useToaster()\r\n  const userApi = useUserApi()\r\n  /**\r\n   * effects\r\n   */\r\n\r\n  /**\r\n   * functions\r\n   */\r\n  const onLoginSubmit = (values: LoginFormValues) => {\r\n    userApi.callDoLogin(values, () => {}, (message: string) => {\r\n      toast.error(message);\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"login-box-container\">\r\n      <div className=\"login-box\">\r\n        <div className=\"login-logo-container\">\r\n          <img src=\"/images/icons/android-icon-512x512.png\" />\r\n        </div>\r\n        <h2 className=\"login-text\">Login</h2>\r\n        <div className=\"login-form-container\">\r\n          <form onSubmit={handleSubmit(onLoginSubmit)} noValidate>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row login-form-row\">\r\n                <div className=\"col-12 login-form-col\">\r\n                  <Controller\r\n                    control={control}\r\n                    name=\"email\"\r\n                    render={({ onChange, onBlur, value, name, ref }) => (\r\n                      <TextInput\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        value={value}\r\n                        inputRef={ref}\r\n                        icon={<AiOutlineMail />}\r\n                        type=\"email\"\r\n                        error={errors.email}\r\n                        placeholder=\"Your email address...\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <Controller\r\n                    control={control}\r\n                    name=\"password\"\r\n                    render={({ onChange, onBlur, value, name, ref }) => (\r\n                      <TextInput\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        value={value}\r\n                        inputRef={ref}\r\n                        icon={<RiLockPasswordLine />}\r\n                        type=\"password\"\r\n                        error={errors.password}\r\n                        placeholder=\"Your password...\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12 login-form-action-col\">\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Login\r\n                    <AiOutlineRight />\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-12 login-form-col signup-link-col\">\r\n                  New here? <Link to={URLS.SIGNUP}>Signup</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\header\\header.tsx",["242"],"import React from 'react'\r\n\r\nimport {\r\n  Navbar\r\n} from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { ACTIONS, URLS } from '../../config'\r\nimport { useAuthStatus } from '../../_common/hooks/custom/useAuthStatus'\r\n\r\nimport {\r\n  AiOutlineLogout,\r\n} from 'react-icons/ai'\r\nimport { useUserApi } from '../../_common/hooks/api/appUserApiHook'\r\nimport { useToaster } from '../../_common/hooks/custom/appToasterHook'\r\nimport { useAppUserDetailsSelector } from '../../_common/hooks/selectors/userSelectorHook'\r\n\r\nfunction HeaderMenu() {\r\n\r\n  const auth = useAuthStatus()\r\n  const userApi = useUserApi()\r\n  const toast  = useToaster()\r\n  const user = useAppUserDetailsSelector()\r\n  /**\r\n   * functions\r\n   */\r\n  const onClickLogout = () => {\r\n    userApi.callDoLogout(() => {}, (message: string) => {\r\n      toast.error(message)\r\n    })\r\n  }\r\n\r\n  if (!auth || !user) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\">\r\n        <Link to={URLS.HOME} className=\"navbar-brand text-light d-flex align-items-center\">\r\n          <img\r\n            src=\"/images/icons/android-icon-144x144.png\"\r\n            className=\"d-inline-block align-top mr-1 header-image\"\r\n            alt=\"React Bootstrap logo\"\r\n          />\r\n          <span className=\"header-text-logo\">Lets Chat</span>\r\n        </Link>\r\n        <div className=\"d-flex justify-content-end flex-grow-1 align-items-center\">\r\n          <span className=\"text-light mr-2 font-weight-bold header-username\">Hello {user.name}</span>\r\n          <button onClick={onClickLogout} className=\"btn btn-dark btn-logout\">Logout <AiOutlineLogout/></button>\r\n        </div>\r\n      </Navbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderMenu\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\userReducer.ts",["243"],"import { ACTIONS } from '../../config'\r\nimport { ActionExtended } from '../../_common/interfaces/ActionExtended';\r\nimport { Friends } from '../../_common/interfaces/models/firends';\r\nimport { User } from '../../_common/interfaces/models/user';\r\n\r\nexport interface UserReducer {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst initialState: UserReducer = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst userReducer = (state = initialState, action: ActionExtended) => {\r\n  switch (action.type) {\r\n    case ACTIONS.USER.LOGIN:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n      };\r\n    case ACTIONS.USER.LOGOUT:\r\n      return {\r\n        ...state,\r\n        ...initialState,\r\n      };\r\n    case ACTIONS.USER.DETAILS:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\globalReducer.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\TextInput\\textInput.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\config\\functions.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\store\\reducers\\messageReducer.ts",["244"],"import { ACTIONS } from '../../config'\r\nimport { ActionExtended } from '../../_common/interfaces/ActionExtended';\r\nimport { ChatMessage } from '../../_common/interfaces/models/chatMessage';\r\nimport { Friends } from '../../_common/interfaces/models/firends';\r\nimport { SearchUser } from '../../_common/interfaces/models/searchUser';\r\nimport { User } from '../../_common/interfaces/models/user';\r\n\r\nexport type FriendOrSearchUser =  Friends | SearchUser\r\n\r\nexport interface MessageReducer {\r\n  list: ChatMessage[];\r\n  total: number;\r\n  limit: number;\r\n  offset: number;\r\n  selectedUser: FriendOrSearchUser | null;\r\n  friends: Friends[];\r\n}\r\n\r\nconst initialState: MessageReducer = {\r\n  list: [],\r\n  friends: [],\r\n  total: 0,\r\n  limit: 0,\r\n  offset: 0,\r\n  selectedUser: null,\r\n};\r\n\r\nconst messageReducer = (state = initialState, action: ActionExtended) => {\r\n  switch (action.type) {\r\n    case ACTIONS.USER.LOGOUT:\r\n      return {\r\n        ...state,\r\n        ...initialState,\r\n      };\r\n    case ACTIONS.MESSAGE.LIST:\r\n      return {\r\n        ...state,\r\n        list: action.payload.messages.reverse(),\r\n        total: action.payload.total,\r\n        limit: action.payload.limit,\r\n        offset: action.payload.offset,\r\n      };\r\n    case ACTIONS.MESSAGE.RESET_LIST:\r\n      return {\r\n        ...state,\r\n        list: [],\r\n        total: 0,\r\n        limit: 0,\r\n        offset: 0,\r\n      };\r\n    case ACTIONS.MESSAGE.APPEND_NEW:\r\n      let newArr = state.list\r\n      newArr.push(action.payload)\r\n      return {\r\n        ...state,\r\n        list: JSON.parse(JSON.stringify(newArr)),\r\n        total: state.total + 1,\r\n      };\r\n    case ACTIONS.MESSAGE.SET_LIMIT:\r\n      return {\r\n        ...state,\r\n        limit: action.payload,\r\n      }\r\n    case ACTIONS.MESSAGE.SET_OFFSET:\r\n      return {\r\n        ...state,\r\n        offset: action.payload,\r\n      }\r\n    case ACTIONS.MESSAGE.SET_TOTAL:\r\n      return {\r\n        ...state,\r\n        total: action.payload,\r\n      }\r\n    case ACTIONS.MESSAGE.SET_SELECTED_USER:\r\n      return {\r\n        ...state,\r\n        selectedUser: action.payload,\r\n      }\r\n    case ACTIONS.MESSAGE.FRIENDS:\r\n        return {\r\n          ...state,\r\n          friends: action.payload,\r\n        };\r\n    case ACTIONS.MESSAGE.RESET_FRIENDS:\r\n        return {\r\n          ...state,\r\n          friends: [],\r\n        };\r\n    case ACTIONS.MESSAGE.SET_FRIENDS:\r\n        return {\r\n          ...state,\r\n          friends: action.payload,\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messageReducer;\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\message.saga.ts",["245","246"],"import { call, put } from 'redux-saga/effects';\r\nimport { ACTIONS, API_URLS, SAGA_ACTIONS, STORAGE } from '../config';\r\nimport { CallApi } from './__callApi';\r\n\r\nexport function* getUserMessages(action: any) {\r\n  try {\r\n    const data = action.payload;\r\n    const resp = yield call(CallApi.GET, API_URLS.MESSAGE.LIST, data, true);\r\n    if (resp.status >= 200 && resp.status < 300 && resp.data && resp.data.success) {\r\n      yield put({\r\n        type: ACTIONS.MESSAGE.LIST,\r\n        payload: resp.data.data,\r\n      })\r\n      action && action.callbackSuccess && action.callbackSuccess(resp.data);\r\n    } else {\r\n      action && action.callbackError && action.callbackError(resp.data);\r\n    }\r\n  } catch (e) {\r\n    action && action.callbackError && action.callbackError(e && e.data ? e.data : e);\r\n  }\r\n}\r\n\r\nexport function* sendMessage(action: any) {\r\n  try {\r\n    const data = action.payload;\r\n    const resp = yield call(CallApi.POST, API_URLS.MESSAGE.SEND, data, true);\r\n    if (resp.status >= 200 && resp.status < 300 && resp.data && resp.data.success) {\r\n      action && action.callbackSuccess && action.callbackSuccess(resp.data);\r\n    } else {\r\n      action && action.callbackError && action.callbackError(resp.data);\r\n    }\r\n  } catch (e) {\r\n    action && action.callbackError && action.callbackError(e && e.data ? e.data : e);\r\n  }\r\n}\r\n\r\nexport function* getFriendsList(action: any) {\r\n  try {\r\n    const data = action.payload;\r\n    const resp = yield call(CallApi.GET, API_URLS.MESSAGE.FRIENDS, data, true);\r\n    if (resp.status >= 200 && resp.status < 300 && resp.data && resp.data.success) {\r\n      yield put({\r\n        type: ACTIONS.MESSAGE.FRIENDS,\r\n        payload: resp.data.data,\r\n      })\r\n      action && action.callbackSuccess && action.callbackSuccess(resp.data);\r\n    } else {\r\n      action && action.callbackError && action.callbackError(resp.data);\r\n    }\r\n  } catch (e) {\r\n    action && action.callbackError && action.callbackError(e && e.data ? e.data : e);\r\n  }\r\n}","D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\user.saga.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\sagas\\__callApi.ts",["247","248","249","250"],"import axios from 'axios';\r\nimport { STORAGE, URLS } from '../config';\r\n\r\nexport class CallApi {\r\n  static GET(url: string, params: any, isAuth: boolean = false, isAdaptive: boolean = false) {\r\n    return new Promise((resolve, reject) => {\r\n      let headers = {};\r\n      if (isAuth || isAdaptive) {\r\n        const token = localStorage.getItem(STORAGE);\r\n        if (token) {\r\n          headers = {\r\n            Authorization: `Bearer ${token}`,\r\n          };\r\n        }\r\n      }\r\n      return axios({\r\n        method: 'GET',\r\n        url,\r\n        headers,\r\n        params,\r\n      })\r\n        .then(success => {\r\n          return resolve(success);\r\n        })\r\n        .catch(error => {\r\n          if(error.response && error.response.status===401 && window.location.pathname != URLS.LOGIN) {\r\n            localStorage.removeItem(STORAGE);\r\n            window.location.href=URLS.LOGIN;\r\n          }\r\n          return reject(error.response);\r\n        });\r\n    });\r\n  }\r\n\r\n  static POST(url: string, data: any, isAuth: boolean = false, isAdaptive: boolean = false) {\r\n    return new Promise((resolve, reject) => {\r\n      let headers = {};\r\n      if (isAuth || isAdaptive) {\r\n        const token = localStorage.getItem(STORAGE);\r\n        if (token) {\r\n          headers = {\r\n            Authorization: `Bearer ${token}`,\r\n          };\r\n        }\r\n      }\r\n      return axios({\r\n        method: 'POST',\r\n        url,\r\n        headers,\r\n        data,\r\n      })\r\n        .then(success => {\r\n          return resolve(success);\r\n        })\r\n        .catch(error => {\r\n          if(error.response && error.response.status===401 && window.location.pathname != URLS.LOGIN) {\r\n            localStorage.removeItem(STORAGE);\r\n            window.location.href=URLS.LOGIN;\r\n          }\r\n          return reject(error.response);\r\n        });\r\n    });\r\n  }\r\n\r\n  static PUT(url: string, data: any, isAuth: boolean = false, isAdaptive: boolean = false) {\r\n    return new Promise((resolve, reject) => {\r\n      let headers = {};\r\n      if (isAuth || isAdaptive) {\r\n        const token = localStorage.getItem(STORAGE);\r\n        if (token) {\r\n          headers = {\r\n            Authorization: `Bearer ${token}`,\r\n          };\r\n        }\r\n      }\r\n      return axios({\r\n        method: 'PUT',\r\n        url,\r\n        headers,\r\n        data,\r\n      })\r\n        .then(success => {\r\n          return resolve(success);\r\n        })\r\n        .catch(error => {\r\n          if(error.response && error.response.status===401 && window.location.pathname != URLS.LOGIN) {\r\n            localStorage.removeItem(STORAGE);\r\n            window.location.href=URLS.LOGIN;\r\n          }\r\n          return reject(error.response);\r\n        });\r\n    });\r\n  }\r\n\r\n  static DELETE(url: string, data: any, isAuth: boolean = false, isAdaptive: boolean = false) {\r\n    return new Promise((resolve, reject) => {\r\n      let headers = {};\r\n      if (isAuth || isAdaptive) {\r\n        const token = localStorage.getItem(STORAGE);\r\n        if (token) {\r\n          headers = {\r\n            Authorization: `Bearer ${token}`,\r\n          };\r\n        }\r\n      }\r\n      return axios({\r\n        method: 'DELETE',\r\n        url,\r\n        headers,\r\n        data,\r\n      })\r\n        .then(success => {\r\n          return resolve(success);\r\n        })\r\n        .catch(error => {\r\n          if(error.response && error.response.status===401 && window.location.pathname != URLS.LOGIN) {\r\n            localStorage.removeItem(STORAGE);\r\n            window.location.href=URLS.LOGIN;\r\n          }\r\n          return reject(error.response);\r\n        });\r\n    });\r\n  }\r\n}\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\custom\\appToasterHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\api\\appUserApiHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\api\\appApiCallHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\actions\\appGlobalActionHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\selectors\\userSelectorHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\chat\\friendlist\\friendList.tsx",["251","252","253","254"],"import React, { useEffect, useState } from 'react'\r\nimport { useUserApi } from '../../../_common/hooks/api/appUserApiHook'\r\nimport { useToaster } from '../../../_common/hooks/custom/appToasterHook'\r\nimport { useAppUserFriendListSelector } from '../../../_common/hooks/selectors/messageSelectorHook'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport moment from 'moment'\r\nimport {\r\n  AiOutlineClose,\r\n} from 'react-icons/ai'\r\nimport { Friends } from '../../../_common/interfaces/models/firends'\r\nimport UserLogo from '../../userlogo/userLogo'\r\nimport useDebounce from '../../../_common/hooks/custom/appDebounce'\r\nimport { SearchUser } from '../../../_common/interfaces/models/searchUser'\r\nimport { useAppMessageSelectedUserSelector } from '../../../_common/hooks/selectors/messageSelectorHook'\r\nimport { useAppMessageAction } from '../../../_common/hooks/actions/appMessageActionHook'\r\nimport { useMessageApi } from '../../../_common/hooks/api/appMessageApiHook'\r\n\r\ninterface FriendListProps {\r\n  shouldHide?: boolean;\r\n  onSelectUser?: (data: any) => void;\r\n}\r\n\r\nfunction FriendList({\r\n  shouldHide,\r\n  onSelectUser,\r\n}: FriendListProps) {\r\n  /**\r\n   * const\r\n   */\r\n  const userApi = useUserApi()\r\n  const toast = useToaster()\r\n  const friendList = useAppUserFriendListSelector()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [filteredFriendList, setFilteredFriendList] = useState<Friends[]>([])\r\n  const debouncedSearchText = useDebounce(searchText, 500)\r\n  const [ searching, setSearching ] = useState(false)\r\n  const [ searchResult, setSearchResult ] = useState<SearchUser[]>([])\r\n  const selectedUser = useAppMessageSelectedUserSelector()\r\n  const messageAction = useAppMessageAction()\r\n  const messageApi = useMessageApi()\r\n  /**\r\n   * effects\r\n   */\r\n  /**\r\n   * get friend list\r\n   */\r\n  useEffect(() => {\r\n    messageApi.callGetFriendList(() => {}, (message: string) => {\r\n      toast.error(message)\r\n    })\r\n  }, [])\r\n  /**\r\n   * filter friend list according to typed text\r\n   */\r\n  useEffect(() => {\r\n    if (!searchText) {\r\n      setFilteredFriendList(friendList)\r\n    } else {\r\n      let list = friendList.filter(f => f.friend_details?.name.toLowerCase().includes(searchText.toLowerCase()))\r\n      setFilteredFriendList(list)\r\n    }\r\n  }, [searchText, friendList])\r\n  /**\r\n   * fetch remote list of user names uses debounce of 500ms\r\n   */\r\n  useEffect(() => {\r\n    if (debouncedSearchText) {\r\n      setSearching(true);\r\n      userApi.callSearchUser({\r\n        text: debouncedSearchText,\r\n      }, (message: string, data: SearchUser[]) => {\r\n        setSearching(false)\r\n        setSearchResult(data)\r\n      }, (message: string) => {\r\n        toast.error(message);\r\n      })\r\n    } else {\r\n      setSearchResult([])\r\n    }\r\n  }, [debouncedSearchText])\r\n  /**\r\n   * if no user is selected then select the first one\r\n   * by default\r\n   */\r\n  useEffect(() => {\r\n    if (friendList && friendList.length && (!selectedUser || !selectedUser.id)) {\r\n      messageAction.setSelectedUser(friendList[0])\r\n    }\r\n  }, [friendList])\r\n  /**\r\n   * functions\r\n   */\r\n  /**\r\n   * clear the search text input\r\n   * @param evt event\r\n   */\r\n  const clearSearchText = (evt: React.MouseEvent) => {\r\n    evt && evt.preventDefault()\r\n    setSearchText('')\r\n  }\r\n  /**\r\n   * on user select and user to chat with\r\n   * @param data any\r\n   */\r\n  const onSelectUserClicked = (data: any) => {\r\n    messageAction.setSelectedUser(data)\r\n    onSelectUser && onSelectUser(data);\r\n  }\r\n  /**\r\n   * render functions\r\n   */\r\n  /**\r\n   * on mobile device hide from the main chat area\r\n   */\r\n  if (shouldHide) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"friend-list-container\">\r\n      <div className=\"friend-list-filter-input-container\">\r\n        <input placeholder=\"Find friends\" className=\"form-control friend-list-filter-input\" value={searchText} onChange={(evt) => setSearchText(evt.target.value)} />\r\n        {\r\n          searchText ? <a href=\"#\" className=\"friend-list-filter-clear\" onClick={clearSearchText}>\r\n            <AiOutlineClose/>\r\n          </a> : null\r\n        }\r\n      </div>\r\n      <PerfectScrollbar options={{\r\n        suppressScrollX: true,\r\n      }}>\r\n      <div className=\"friend-list-inner\">\r\n        {/* search list array - from remote */}\r\n        {\r\n          searchResult && searchResult.length ? <>\r\n            <div className=\"search-result-list\">\r\n              <p>Search Result</p>\r\n            {\r\n              searchResult.slice(0, 10).map((sr, index) => {\r\n                return <div key={index} className=\"search-result-single\" onClick={() => onSelectUserClicked(sr)} >\r\n                  <UserLogo name={sr.name} />\r\n                  <span>{sr.name}</span>\r\n                </div>\r\n              })\r\n            }\r\n            </div>\r\n          </> : null\r\n        }\r\n        {/* local friends array after filtered */}\r\n        {\r\n          friendList && friendList.length ? <>\r\n          {\r\n            filteredFriendList && filteredFriendList.length ? filteredFriendList.map((frnd, index) => {\r\n              return <div key={index} className=\"single-friend-container\" onClick={() => onSelectUserClicked(frnd)}>\r\n                <UserLogo name={frnd.friend_details?.name} imageLink={frnd.friend_details?.imageFullPath} />\r\n                <div className=\"friend-list-details\">\r\n                <span className=\"friend-list-name\">{frnd.friend_details?.name}</span>\r\n                <span className=\"friend-list-date\">{frnd.last_message_time ? moment(frnd.last_message_time).format('ddd, D/M YY, h:m A') : 'N/A'}</span>\r\n                </div>\r\n              </div>\r\n            }) : !searching && (!searchResult || !searchResult.length) ? <div className=\"friend-list-empty mt-3\">\r\n              <p>Try change search filter!</p>\r\n            </div> : null\r\n          }\r\n          </> : <div className=\"friend-list-empty mt-3\">\r\n            <p>No friends yet!</p>\r\n          </div>\r\n        }\r\n        \r\n      </div>\r\n      </PerfectScrollbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FriendList\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\chat\\chatarea\\chatArea.tsx",["255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useEffect, useLayoutEffect, useState } from 'react'\r\nimport { useAppMessageLimitSelector, useAppMessageListSelector, useAppMessageOffsetSelector, useAppMessageSelectedUserSelector, useAppUserFriendListSelector } from '../../../_common/hooks/selectors/messageSelectorHook'\r\nimport { useAppUserDetailsSelector } from '../../../_common/hooks/selectors/userSelectorHook'\r\nimport { Friends } from '../../../_common/interfaces/models/firends'\r\nimport { SearchUser } from '../../../_common/interfaces/models/searchUser'\r\nimport UserLogo from '../../userlogo/userLogo'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport moment from 'moment'\r\nimport {\r\n  IoMdSend,\r\n} from 'react-icons/io'\r\nimport { useAppGlobalIsDeviceMobileSelector } from '../../../_common/hooks/selectors/globalSelectorHook'\r\nimport { useMessageApi } from '../../../_common/hooks/api/appMessageApiHook'\r\nimport { useAppMessageAction } from '../../../_common/hooks/actions/appMessageActionHook'\r\nimport FriendsModal from '../friendsModal/friendsModal'\r\n\r\nimport classnames from 'classnames'\r\n\r\ninterface ChatAreaProps {\r\n  sendMessage: (text: string, toUser: number) => void;\r\n}\r\n\r\nfunction ChatArea({\r\n  sendMessage,\r\n}: ChatAreaProps) {\r\n  /**\r\n   * const\r\n   */\r\n  const selectedUser = useAppMessageSelectedUserSelector()\r\n  const user = useAppUserDetailsSelector()\r\n  const [ messageText, setMessageText ] = useState('')\r\n  const [ showListModal, setShowListModal ] = useState(false)\r\n  const isMobile = useAppGlobalIsDeviceMobileSelector()\r\n  const messageList = useAppMessageListSelector()\r\n  const messageApi = useMessageApi()\r\n  const limit = useAppMessageLimitSelector()\r\n  const offset = useAppMessageOffsetSelector()\r\n  const messageAction = useAppMessageAction()\r\n  const friendList = useAppUserFriendListSelector()\r\n  const [ chatUserId, setChatUserId ] = useState(0)\r\n  /**\r\n   * effects\r\n   */\r\n  /**\r\n   * set limit and offset \r\n   */\r\n  useEffect(() => {\r\n    messageAction.setLimit(500)\r\n    messageAction.setOffset(0)\r\n  }, [])\r\n  /**\r\n   * fetch past message list for the selected user\r\n   */\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      let chatId = (selectedUser as Friends).friendId ? (selectedUser as Friends).friendId : selectedUser.id\r\n      messageApi.callGetList({\r\n        user: chatId,\r\n        limit: limit || 100,\r\n        offset: offset || 0,\r\n      }, () => {}, () => {})\r\n\r\n      setChatUserId(chatId)\r\n    }\r\n  }, [selectedUser])\r\n  /**\r\n   * scroll down chat area, when new message arrives\r\n   */\r\n  useLayoutEffect(() => {\r\n    let lastMessage = document.querySelector('.message-single:last-child')\r\n    if (lastMessage) {\r\n      lastMessage.scrollIntoView()\r\n    }\r\n  }, [messageList])\r\n  /**\r\n   * functions\r\n   */\r\n  /**\r\n   * get user name to display on top section\r\n   */\r\n  const getUserName = () => {\r\n    if (!selectedUser) {\r\n      return ''\r\n    }\r\n    return (selectedUser as Friends).friend_details ? (selectedUser as Friends).friend_details?.name : (selectedUser as SearchUser).name ? (selectedUser as SearchUser).name : 'N/A'\r\n  }\r\n  /**\r\n   * send message via socket (parent component actually sends the data)\r\n   */\r\n  const sendChatMessage = () => {\r\n    if (messageText && selectedUser) {\r\n      let toId = null\r\n      if ((selectedUser as Friends).friendId) {\r\n        toId = (selectedUser as Friends).friendId\r\n      } else {\r\n        toId = selectedUser.id\r\n      }\r\n      sendMessage(messageText, toId);\r\n      setMessageText('')\r\n    }\r\n  }\r\n  /**\r\n   * check if enter is pressed, if yes then send message\r\n   * @param evt event\r\n   */\r\n  const onKeyDownInput = (evt: React.KeyboardEvent) => {\r\n    if (evt.key == \"Enter\") {\r\n      if (messageText) {\r\n        sendChatMessage()\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * open friend list modal\r\n   */\r\n  const openListModal = () => {\r\n    setShowListModal(true)\r\n  }\r\n  /**\r\n   * close friend list modal\r\n   */\r\n  const closeListModal = () => {\r\n    setShowListModal(false)\r\n  }\r\n  /**\r\n   * get time string to display bellow chat messages\r\n   * @param str string\r\n   */\r\n  const getTimeString = (str: string) => {\r\n    let momentObj = moment(str)\r\n\r\n    if (momentObj.format('YYYY-MM-DD') == moment().format('YYYY-MM-DD')) {\r\n      // today\r\n      return momentObj.format('hh:mm A');\r\n    } else {\r\n      return momentObj.format('D/M YY, hh:mm A')\r\n    }\r\n  }\r\n  /**\r\n   * render functions\r\n   */\r\n  return (\r\n    <div className=\"chat-main-area\">\r\n      {\r\n        selectedUser ? <>\r\n          <div className=\"chat-main-header\">\r\n            <div className=\"chat-main-user-info\">\r\n              <UserLogo name={getUserName()} imageLink={(selectedUser as Friends).friend_details?.imageFullPath} />\r\n              <div className=\"chat-main-user-name-wrapper\">\r\n                <span className=\"chat-main-user-name\">{getUserName()}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"chat-main-user-list-wrap\">\r\n              {\r\n                isMobile ? <button onClick={openListModal} className=\"btn btn-dark\">Friend List</button> : null\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className=\"chat-main-display\">\r\n            <div className=\"chat-main-messages\">\r\n            <PerfectScrollbar options={{\r\n              suppressScrollX: true,\r\n            }}>\r\n              <div className=\"chat-main-messages-list\">\r\n              {\r\n                messageList.filter(x => (x.receiverId == chatUserId || x.senderId == chatUserId) && (x.senderId == user?.id || x.receiverId == user?.id)).map((message, index) => {\r\n                  let chatClass = classnames({\r\n                    'message-single': true,\r\n                    'send': message.senderId == user?.id,\r\n                    'received': message.receiverId == user?.id,\r\n                  })\r\n                  let chatInnerClass = classnames({\r\n                    'message-inner-single': true,\r\n                    'send': message.senderId == user?.id,\r\n                    'received': message.receiverId == user?.id,\r\n                  })\r\n                  return <div key={index} className={chatClass} >\r\n                    <div className={chatInnerClass}>\r\n                      <p>{message?.text}</p>\r\n                      <span>{getTimeString(message.createdAt)}</span>\r\n                    </div>\r\n                  </div>\r\n                })\r\n              }\r\n              </div>\r\n            </PerfectScrollbar>\r\n            </div>\r\n            <div className=\"chat-main-input-container\">\r\n              <div className=\"chat-main-input-container-inner\">\r\n                <input onKeyDown={onKeyDownInput} value={messageText} onChange={(evt) => setMessageText(evt.target.value)} placeholder=\"Type your message\" className=\"form-control chat-main-input\"/>\r\n                <a href=\"#\" onClick={(evt) => {\r\n                  evt.preventDefault()\r\n                  sendChatMessage();\r\n                }} className={messageText ? 'chat-main-input-send' : 'chat-main-input-send disabled'}>\r\n                <IoMdSend/>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </> : <>\r\n          <div className=\"chat-no-user\">\r\n            <p>{friendList && friendList.length ? 'Select user to chat with!' : 'Lets search some friends!'}</p>\r\n            {\r\n              isMobile ? <button onClick={openListModal} className=\"btn btn-dark\">Search Friends</button> : null\r\n            }\r\n          </div>\r\n        </>\r\n      }\r\n      {\r\n        isMobile ? <FriendsModal onClose={closeListModal} shouldShow={showListModal} /> : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatArea\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\config\\colors.ts",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\userlogo\\userLogo.tsx",["268"],"import React, { useEffect, useState } from 'react'\r\nimport { getColorFor } from '../../config'\r\n\r\ninterface UserLogoProps {\r\n  imageLink?: string;\r\n  name?: string;\r\n}\r\n\r\nfunction UserLogo({\r\n  imageLink,\r\n  name,\r\n}: UserLogoProps) {\r\n\r\n  const [color, setColor] = useState('')\r\n  const [colorStyle, setColorStyle] = useState<any>({})\r\n\r\n  /**\r\n   * set color according to name\r\n   */\r\n  useEffect(() => {\r\n    if (name) {\r\n      setColor(getColorFor(name));\r\n    }\r\n  }, [name])\r\n  /**\r\n   * set color style object\r\n   */\r\n  useEffect(() => {\r\n    if (color) {\r\n      setColorStyle({backgroundColor: color})\r\n    }\r\n  }, [color])\r\n\r\n  /**\r\n   * get name initials 2 characters\r\n   */\r\n  const getInitials = () => {\r\n    if (!name || !name.length) {\r\n      return 'NA'\r\n    }\r\n    let parts = name.toUpperCase().split(' ')\r\n    return parts && parts.length >= 2 ? parts.map(x => x.charAt(0)).filter(x => x).slice(0, 2).join('') : parts && parts.length == 1 ? parts[0].slice(0, 2) : 'NA'\r\n  }\r\n\r\n  if (!imageLink && !name) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"user-logo-container\" style={colorStyle}>\r\n      {\r\n        imageLink ? <img src={imageLink} alt=\"User\" /> : null\r\n      }\r\n      {\r\n        name && !imageLink ? <span>{getInitials()}</span> : null\r\n      }\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default UserLogo\r\n","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\custom\\appDebounce.tsx",["269","270"],"import React, { useState, useEffect } from 'react';\r\n\r\nexport default function useDebounce(value: any, delay: number) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value]);\r\n\r\n  return debouncedValue;\r\n}","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\selectors\\messageSelectorHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\actions\\appMessageActionHook.tsx",["271"],"import { useDispatch } from 'react-redux'\r\nimport { ACTIONS } from '../../../config'\r\nimport { FriendOrSearchUser } from '../../../store/reducers/messageReducer'\r\nimport { Friends } from '../../interfaces/models/firends'\r\nimport { SearchUser } from '../../interfaces/models/searchUser'\r\n\r\nexport function useAppMessageAction() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  \r\n  /**\r\n   * append new message in redux\r\n   * @param data message\r\n   */\r\n  const appendNewMessage = (data: any) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.APPEND_NEW,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * reset message list\r\n   */\r\n  const resetList = () => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.RESET_LIST,\r\n      payload: null,\r\n    })\r\n  }\r\n  /**\r\n   * set message list fetch limit\r\n   * @param data number\r\n   */\r\n  const setLimit = (data: number) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_LIMIT,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * set message list fetch offset - used for paginating\r\n   * @param data number\r\n   */\r\n  const setOffset = (data: number) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_OFFSET,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * set message list total count\r\n   * @param data number\r\n   */\r\n  const setTotal = (data: number) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_TOTAL,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * set current user for chat\r\n   * @param data user\r\n   */\r\n  const setSelectedUser = (data: FriendOrSearchUser) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_SELECTED_USER,\r\n      payload: data,\r\n    })\r\n  }\r\n  /**\r\n   * reset user friend list array\r\n   */\r\n  const resetUserFriendList = () => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.RESET_FRIENDS,\r\n      payload: null,\r\n    })\r\n  }\r\n  /**\r\n   * set user friend list\r\n   * @param data Friends array\r\n   */\r\n  const setUserFriendList = (data: Friends[]) => {\r\n    dispatch({\r\n      type: ACTIONS.MESSAGE.SET_FRIENDS,\r\n      payload: data,\r\n    })\r\n  }\r\n\r\n  return {\r\n    appendNewMessage,\r\n    resetList,\r\n    setLimit,\r\n    setOffset,\r\n    setTotal,\r\n    setSelectedUser,\r\n    resetUserFriendList,\r\n    setUserFriendList,\r\n  }\r\n}","D:\\Projects\\node-react-chat\\letschat-ui\\src\\_common\\hooks\\api\\appMessageApiHook.tsx",[],"D:\\Projects\\node-react-chat\\letschat-ui\\src\\components\\chat\\friendsModal\\friendsModal.tsx",["272"],"import React from 'react'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai'\r\nimport FriendList from '../friendlist/friendList'\r\n\r\ninterface FriendsModalProps {\r\n  shouldShow: boolean;\r\n  onClose: () => void;\r\n}\r\n/**\r\n * modal to show friend list when in mobile device\r\n */\r\nfunction FriendsModal({\r\n  shouldShow,\r\n  onClose,\r\n}: FriendsModalProps) {\r\n  const onSelectUser = (data: any) => {\r\n    onClose()\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        show={shouldShow}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        size=\"sm\"\r\n        className=\"friend-list-modal-wrapper\"\r\n      >\r\n        <Modal.Body className=\"friend-list-modal-body\" >\r\n          <a href=\"#\" onClick={(evt) => {\r\n            evt.preventDefault()\r\n            onClose()\r\n          }}>\r\n            <AiOutlineCloseCircle/>\r\n          </a>\r\n          <FriendList onSelectUser={onSelectUser}/>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default FriendsModal\r\n",{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":3,"column":50,"nodeType":"279","messageId":"280","endLine":3,"endColumn":60},{"ruleId":"277","severity":1,"message":"281","line":3,"column":62,"nodeType":"279","messageId":"280","endLine":3,"endColumn":72},{"ruleId":"277","severity":1,"message":"282","line":3,"column":74,"nodeType":"279","messageId":"280","endLine":3,"endColumn":82},{"ruleId":"277","severity":1,"message":"283","line":3,"column":84,"nodeType":"279","messageId":"280","endLine":3,"endColumn":94},{"ruleId":"284","severity":1,"message":"285","line":29,"column":6,"nodeType":"286","endLine":29,"endColumn":8,"suggestions":"287"},{"ruleId":"288","severity":1,"message":"289","line":8,"column":15,"nodeType":"290","messageId":"291","endLine":8,"endColumn":17},{"ruleId":"277","severity":1,"message":"292","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"283","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":20},{"ruleId":"277","severity":1,"message":"292","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"282","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":18},{"ruleId":"288","severity":1,"message":"289","line":16,"column":16,"nodeType":"290","messageId":"291","endLine":16,"endColumn":18},{"ruleId":"288","severity":1,"message":"289","line":30,"column":16,"nodeType":"290","messageId":"291","endLine":30,"endColumn":18},{"ruleId":"288","severity":1,"message":"289","line":44,"column":16,"nodeType":"290","messageId":"291","endLine":44,"endColumn":18},{"ruleId":"284","severity":1,"message":"293","line":15,"column":6,"nodeType":"286","endLine":15,"endColumn":12,"suggestions":"294"},{"ruleId":"277","severity":1,"message":"292","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"295","line":1,"column":10,"nodeType":"279","messageId":"280","endLine":1,"endColumn":14},{"ruleId":"277","severity":1,"message":"296","line":1,"column":16,"nodeType":"279","messageId":"280","endLine":1,"endColumn":20},{"ruleId":"277","severity":1,"message":"297","line":1,"column":39,"nodeType":"279","messageId":"280","endLine":1,"endColumn":48},{"ruleId":"277","severity":1,"message":"298","line":1,"column":50,"nodeType":"279","messageId":"280","endLine":1,"endColumn":61},{"ruleId":"284","severity":1,"message":"299","line":39,"column":6,"nodeType":"286","endLine":39,"endColumn":12,"suggestions":"300"},{"ruleId":"277","severity":1,"message":"301","line":45,"column":11,"nodeType":"279","messageId":"280","endLine":45,"endColumn":19},{"ruleId":"277","severity":1,"message":"302","line":45,"column":30,"nodeType":"279","messageId":"280","endLine":45,"endColumn":38},{"ruleId":"303","severity":1,"message":"304","line":67,"column":11,"nodeType":"305","endLine":67,"endColumn":63},{"ruleId":"303","severity":1,"message":"304","line":10,"column":11,"nodeType":"305","endLine":10,"endColumn":63},{"ruleId":"277","severity":1,"message":"292","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":26},{"ruleId":"277","severity":1,"message":"306","line":18,"column":8,"nodeType":"279","messageId":"280","endLine":18,"endColumn":14},{"ruleId":"277","severity":1,"message":"307","line":19,"column":10,"nodeType":"279","messageId":"280","endLine":19,"endColumn":28},{"ruleId":"277","severity":1,"message":"301","line":42,"column":11,"nodeType":"279","messageId":"280","endLine":42,"endColumn":19},{"ruleId":"277","severity":1,"message":"302","line":42,"column":30,"nodeType":"279","messageId":"280","endLine":42,"endColumn":38},{"ruleId":"303","severity":1,"message":"304","line":67,"column":11,"nodeType":"305","endLine":67,"endColumn":63},{"ruleId":"277","severity":1,"message":"308","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":17},{"ruleId":"277","severity":1,"message":"309","line":3,"column":10,"nodeType":"279","messageId":"280","endLine":3,"endColumn":17},{"ruleId":"277","severity":1,"message":"310","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":14},{"ruleId":"277","severity":1,"message":"311","line":2,"column":29,"nodeType":"279","messageId":"280","endLine":2,"endColumn":41},{"ruleId":"277","severity":1,"message":"312","line":2,"column":43,"nodeType":"279","messageId":"280","endLine":2,"endColumn":50},{"ruleId":"288","severity":1,"message":"313","line":26,"column":88,"nodeType":"290","messageId":"291","endLine":26,"endColumn":90},{"ruleId":"288","severity":1,"message":"313","line":56,"column":88,"nodeType":"290","messageId":"291","endLine":56,"endColumn":90},{"ruleId":"288","severity":1,"message":"313","line":86,"column":88,"nodeType":"290","messageId":"291","endLine":86,"endColumn":90},{"ruleId":"288","severity":1,"message":"313","line":116,"column":88,"nodeType":"290","messageId":"291","endLine":116,"endColumn":90},{"ruleId":"284","severity":1,"message":"314","line":51,"column":6,"nodeType":"286","endLine":51,"endColumn":8,"suggestions":"315"},{"ruleId":"284","severity":1,"message":"316","line":80,"column":6,"nodeType":"286","endLine":80,"endColumn":27,"suggestions":"317"},{"ruleId":"284","severity":1,"message":"318","line":89,"column":6,"nodeType":"286","endLine":89,"endColumn":18,"suggestions":"319"},{"ruleId":"320","severity":1,"message":"321","line":123,"column":24,"nodeType":"305","endLine":123,"endColumn":99},{"ruleId":"284","severity":1,"message":"322","line":50,"column":6,"nodeType":"286","endLine":50,"endColumn":8,"suggestions":"323"},{"ruleId":"284","severity":1,"message":"324","line":65,"column":6,"nodeType":"286","endLine":65,"endColumn":20,"suggestions":"325"},{"ruleId":"288","severity":1,"message":"289","line":107,"column":17,"nodeType":"290","messageId":"291","endLine":107,"endColumn":19},{"ruleId":"288","severity":1,"message":"289","line":132,"column":40,"nodeType":"290","messageId":"291","endLine":132,"endColumn":42},{"ruleId":"288","severity":1,"message":"289","line":166,"column":55,"nodeType":"290","messageId":"291","endLine":166,"endColumn":57},{"ruleId":"288","severity":1,"message":"289","line":166,"column":83,"nodeType":"290","messageId":"291","endLine":166,"endColumn":85},{"ruleId":"288","severity":1,"message":"289","line":166,"column":113,"nodeType":"290","messageId":"291","endLine":166,"endColumn":115},{"ruleId":"288","severity":1,"message":"289","line":166,"column":141,"nodeType":"290","messageId":"291","endLine":166,"endColumn":143},{"ruleId":"288","severity":1,"message":"289","line":169,"column":46,"nodeType":"290","messageId":"291","endLine":169,"endColumn":48},{"ruleId":"288","severity":1,"message":"289","line":170,"column":52,"nodeType":"290","messageId":"291","endLine":170,"endColumn":54},{"ruleId":"288","severity":1,"message":"289","line":174,"column":46,"nodeType":"290","messageId":"291","endLine":174,"endColumn":48},{"ruleId":"288","severity":1,"message":"289","line":175,"column":52,"nodeType":"290","messageId":"291","endLine":175,"endColumn":54},{"ruleId":"320","severity":1,"message":"321","line":191,"column":17,"nodeType":"305","endLine":194,"endColumn":103},{"ruleId":"288","severity":1,"message":"289","line":42,"column":129,"nodeType":"290","messageId":"291","endLine":42,"endColumn":131},{"ruleId":"277","severity":1,"message":"326","line":1,"column":8,"nodeType":"279","messageId":"280","endLine":1,"endColumn":13},{"ruleId":"284","severity":1,"message":"327","line":13,"column":6,"nodeType":"286","endLine":13,"endColumn":13,"suggestions":"328"},{"ruleId":"277","severity":1,"message":"329","line":5,"column":10,"nodeType":"279","messageId":"280","endLine":5,"endColumn":20},{"ruleId":"320","severity":1,"message":"321","line":31,"column":11,"nodeType":"305","endLine":34,"endColumn":14},"no-native-reassign",["330"],"no-negated-in-lhs",["331"],"@typescript-eslint/no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'HashRouter' is defined but never used.","'Redirect' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkDeviceSize'. Either include it or remove the dependency array.","ArrayExpression",["332"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'authChecker'. Either include it or remove the dependency array.",["333"],"'fork' is defined but never used.","'take' is defined but never used.","'takeEvery' is defined but never used.","'takeLeading' is defined but never used.","React Hook useEffect has missing dependencies: 'messageAction' and 'socket'. Either include them or remove the dependency array.",["334"],"'register' is assigned a value but never used.","'setValue' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Loader' is defined but never used.","'useAppGlobalAction' is defined but never used.","'ACTIONS' is defined but never used.","'Friends' is defined but never used.","'User' is defined but never used.","'SAGA_ACTIONS' is defined but never used.","'STORAGE' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'messageApi' and 'toast'. Either include them or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'toast' and 'userApi'. Either include them or remove the dependency array.",["336"],"React Hook useEffect has missing dependencies: 'messageAction' and 'selectedUser'. Either include them or remove the dependency array.",["337"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'messageAction'. Either include it or remove the dependency array.",["338"],"React Hook useEffect has missing dependencies: 'limit', 'messageApi', and 'offset'. Either include them or remove the dependency array.",["339"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["340"],"'SearchUser' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},"Update the dependencies array to be: [checkDeviceSize]",{"range":"359","text":"360"},"Update the dependencies array to be: [authChecker, user]",{"range":"361","text":"362"},"Update the dependencies array to be: [messageAction, socket, user]",{"range":"363","text":"364"},"Update the dependencies array to be: [messageApi, toast]",{"range":"365","text":"366"},"Update the dependencies array to be: [debouncedSearchText, toast, userApi]",{"range":"367","text":"368"},"Update the dependencies array to be: [friendList, messageAction, selectedUser]",{"range":"369","text":"370"},"Update the dependencies array to be: [messageAction]",{"range":"371","text":"372"},"Update the dependencies array to be: [limit, messageApi, offset, selectedUser]",{"range":"373","text":"374"},"Update the dependencies array to be: [delay, value]",{"range":"375","text":"376"},[874,876],"[checkDeviceSize]",[516,522],"[authChecker, user]",[1391,1397],"[messageAction, socket, user]",[1952,1954],"[messageApi, toast]",[2771,2792],"[debouncedSearchText, toast, userApi]",[3049,3061],"[friendList, messageAction, selectedUser]",[2033,2035],"[messageAction]",[2448,2462],"[limit, messageApi, offset, selectedUser]",[360,367],"[delay, value]"]